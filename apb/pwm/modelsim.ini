;
; ECE 437 default modelsim.ini file
;
;
[Library]
;vhdl_psl_checkers = $MODEL_TECH/../vhdl_psl_checkers       // Source files only for this release
;verilog_psl_checkers = $MODEL_TECH/../verilog_psl_checkers // Source files only for this release
;mvc_lib = $MODEL_TECH/../mvc_lib
std = $MODEL_TECH/../std
ieee = $MODEL_TECH/../ieee
verilog = $MODEL_TECH/../verilog
vital2000 = $MODEL_TECH/../vital2000
std_developerskit = $MODEL_TECH/../std_developerskit
synopsys = $MODEL_TECH/../synopsys
modelsim_lib = $MODEL_TECH/../modelsim_lib
sv_std = $MODEL_TECH/../sv_std
others = $MODEL_TECH/../bin/vsim

altera = $LIBS437/altera
altera_mf = $LIBS437/altera_mf
cycloneii = $LIBS437/cycloneii
cycloneive = $LIBS437/cycloneive
altera_ver = $LIBS437/altera_ver
altera_mf_ver = $LIBS437/altera_mf_ver
cycloneii_ver = $LIBS437/cycloneii_ver
cycloneive_ver = $LIBS437/cycloneive_ver

[vcom]
; VHDL93 variable selects language version as the default.
; Default is VHDL-2002.
; Value of 0 or 1987 for VHDL-1987.
; Value of 1 or 1993 for VHDL-1993.
; Default or value of 2 or 2002 for VHDL-2002.
; Value of 3 or 2008 for VHDL-2008
VHDL93 = 2008

; Show source line containing error. Default is off.
Show_source = 1

; Turn on resolving of ambiguous function overloading in favor of the
; "explicit" function declaration (not the one automatically created by
; the compiler for each type declaration). Default is off.
; The .ini file has Explicit enabled so that std_logic_signed/unsigned
; will match the behavior of synthesis tools.
Explicit = 1

; Turns on lint-style checking.
Show_Lint = 1

; Turn ON detection of FSM Implicit Transitions.
FsmImplicitTrans = 1

; Set coverage options during compiling
Coverage = sbceft
CoverCells = 1
CoverExcludeDefault = 1
CoverageFEC = 1
CoverageShortCircuit = 0
CoverOpt = 1
CoverFEC = 1
CoverShortCircuit = 0

; Do not limit size of registers for which toggle coverage is reported
; default is 256. 0 means no limit
ToggleWidthLimit = 0

[vlog]
; Activate optimizations on expressions that do not involve signals,
; waits, or function/procedure/task invocations. Default is off.
ScalarOpts = 1

; Turns on lint-style checking.
Show_Lint = 1

; Show source line containing error. Default is off.
Show_source = 1

; Turn on bad option warning. Default is off.
Show_BadOptionWarning = 1

; Set the option to treat all files specified in a vlog invocation as a
; single compilation unit. The default value is set to 0 which will treat
; each file as a separate compilation unit as specified in the P1800 draft standard.
; MultiFileCompilationUnit = 1

; LibrarySearchPath = <path/lib> [<path/lib> ...]
LibrarySearchPath = mtiAvm mtiOvm mtiUvm mtiUPF

; Enable SystemVerilog 3.1a $typeof() function. Default is off.
; EnableTypeOf = 1

; Turn ON detection of FSM Implicit Transitions.
FsmImplicitTrans = 1

; List of file suffixes which will be read as SystemVerilog.  White space
; in extensions can be specified with a back-slash: "\ ".  Back-slashes
; can be specified with two consecutive back-slashes: "\\";
; SVFileExtensions = sv svp svh

; This setting is the same as the vlog -sv command line switch.
; Enables SystemVerilog features and keywords when true (1).
; When false (0), the rules of IEEE Std 1364-2001 are followed and
; SystemVerilog keywords are ignored.
Svlog = 1

; Set coverage options during compiling
Coverage = sbceft
CoverCells = 1
CoverExcludeDefault = 1
CoverageFEC = 1
CoverageShortCircuit = 0
CoverOpt = 1
CoverFEC = 1
CoverShortCircuit = 0


[sccom]
; Enable use of SCV include files and library.  Default is off.
; UseScv = 1

; Add C++ compiler options to the sccom command line by using this variable.
; CppOptions = -g

; Use custom C++ compiler located at this path rather than the default path.
; The path should point directly at a compiler executable.
; CppPath = /usr/bin/g++

; Enable verbose messages from sccom.  Default is off.
; SccomVerbose = 1

; sccom logfile.  Default is no logfile.
; SccomLogfile = sccom.log

; Enable use of SC_MS include files and library.  Default is off.
; UseScMs = 1

;mcj 2020-01-10 [vopt]
; Turn on code coverage in vopt.  Default is off.
; Coverage = sbceft

; Control compiler optimizations that are allowed when
; code coverage is on.  Refer to the comment for this in the [vlog] area.
; CoverOpt = 3

; Increase or decrease the maximum number of rows allowed in a FEC table, implementing
; a condition coverage or expression coverage expression, by changing FecEffort.
; Higher FecEffort leads to a longer compile time, but more expressions covered.
; This is a number from 1 to 3, with the following meanings (the default is 1):
;    3 -- High FecEffort, Allows large expressions to be covered, will cause longer compile time.
;    2 -- Medium FecEffort, Allows more number of inputs per expression than Low FecEffort to be covered.
;    1 -- Low FecEffort, Covers only small expressions or conditions and skips larger ones.
; FecEffort = 2

; Enable code coverage reporting of code that has been optimized away.
; The default is not to report.
; CoverReportCancelled = 1

; Do not show immediate assertions with constant expressions in
; GUI/reports/UCDB etc. By default immediate assertions with constant
; expressions are shown in GUI/reports/UCDB etc. This does not affect
; evaluation of immediate assertions.
; ShowConstantImmediateAsserts = 0

; Set the maximum number of iterations permitted for a generate loop.
; Restricting this permits the implementation to recognize infinite
; generate loops.
; GenerateLoopIterationMax = 100000

; Set the maximum depth permitted for a recursive generate instantiation.
; Restricting this permits the implementation to recognize infinite
; recursions.
; GenerateRecursionDepthMax = 200

; Set the number of processes created during the code generation phase.
; By default a heuristic is used to set this value.  This may be set to 0
; to disable this feature completely.
; ParallelJobs = 0

; Controls SystemVerilog Language Extensions.  These options enable
; some non-LRM compliant behavior.  Valid extensions are "feci",
; "pae", "uslt" and "spsl".
; SVExtensions = uslt,spsl

[vsim]
; vopt flow
; Set to turn on automatic optimization of a design.
; Default is on
;mcj 2020-01-10 VoptFlow = 0

; Simulator resolution
; Set to fs, ps, ns, us, ms, or sec with optional prefix of 1, 10, or 100.
Resolution = ns

; User time unit for run commands
; Set to default, fs, ps, ns, us, ms, or sec. The default is to use the
; unit specified for Resolution. For example, if Resolution is 100ps,
; then UserTimeUnit defaults to ps.
; Should generally be set to default.
UserTimeUnit = ns

; Default run length
RunLength = 1000

; Maximum iterations that can be run without advancing simulation time
IterationLimit = 5000

; Severity level of a VHDL assertion message or of a SystemVerilog immediate assertionSummary

I have a 256-bit wide signal bus that does not get included in my toggle coverage report.   I have confirmed in the waveforms that the bits of the bus are toggling. 
Details

By default, Questa/ModelSim limits the width of bus signals it analyzes for toggle coverage to 128 bits. 

There is a modelsim.ini variable called ToggleWidthLimit that can be set to override the default:

The ToggleWidthLimit modelsim.ini variable limits the maximum width of signals that are
automatically added to toggle coverage with the +cover=t argument to vcom or vlog. The
default limit is 128. A value of 0 is taken as "unlimited." This limit is designed to filter out
memories from toggle coverage. The limit applies to Verilog registers and VHDL arrays. If the
register or array is larger than the limit, it is not added to toggle coverage.

Please find this section in your modelsim.ini file and uncomment the line (remove the leading semicolon) for the ToggleWidthLimit variable and set its value as shown here:

; Limit the widths of registers automatically tracked for toggle coverage. Default is 128.
; For unlimited width, set to 0.
ToggleWidthLimit = 256


Optionally, there is a vsim command line option called -togglewidthlimit that could be used to override the default:

      -togglewidthlimit <int>

(optional) Sets the maximum width of signals, <int>, that are automatically added to toggle
coverage with the -cover t argument for vcom or vlog. Overrides the global value set by the
ToggleWidthLimit modelsim.ini variable. If used, it provides default limit values for any
design units not compiled with vlog –togglewidthlimit or vcom –togglewidthlimit.
; which will cause a running simulation to stop.
; VHDL assertions and SystemVerilog immediate assertions that occur with the
; given severity or higher will cause a running simulation to stop.
; This value is ignored during elaboration.
; 0 = Note  1 = Warning  2 = Error  3 = Failure  4 = Fatal
BreakOnAssertion = 3

; Simulation Breakpoint messages
; This flag controls the display of function names when reporting the location
; where the simulator stops because of a breakpoint or fatal error.
; Example with function name:    # Break in Process ctr at counter.vhd line 44
; Example without function name: # Break at counter.vhd line 44
; Default value is 1.
ShowFunctions = 1

; Default radix for all windows and commands.
; Radix may be one of: symbolic, ascii, binary, octal, decimal, hex, unsigned
; Flags may be one of: enumnumeric, showbase
DefaultRadix = hex
;DefaultRadixFlags = showbase

; VSIM Startup command
; Startup = do startup.do

; VSIM Shutdown file
; Filename to save u/i formats and configurations.
; ShutdownFile = restart.do
; To explicitly disable auto save:
; ShutdownFile = --disable-auto-save

; File for saving command transcript
TranscriptFile = transcript

; File for saving command history
; CommandHistory = cmdhist.log

; Specify whether paths in simulator commands should be described
; in VHDL or Verilog format.
; For VHDL, PathSeparator = /
; For Verilog, PathSeparator = .
; Must not be the same character as DatasetSeparator.
PathSeparator = /

; Specify the dataset separator for fully rooted contexts.
; The default is ':'. For example: sim:/top
; Must not be the same character as PathSeparator.
DatasetSeparator = :

; Disable VHDL assertion messages
 IgnoreNote = 1
 IgnoreWarning = 1
 IgnoreError = 1
 IgnoreFailure = 1

; Disable SystemVerilog assertion messages
 IgnoreSVAInfo = 1
 IgnoreSVAWarning = 1
 IgnoreSVAError = 1
 IgnoreSVAFatal = 1

; Control VHDL files opened for write.
;   0 = Buffered, 1 = Unbuffered
UnbufferedOutput = 0

; Control the number of VHDL files open concurrently.
; This number should always be less than the current ulimit
; setting for max file descriptors.
;   0 = unlimited
ConcurrentFileLimit = 40

; Control the number of hierarchical regions displayed as
; part of a signal name shown in the Wave window.
; A value of zero tells VSIM to display the full name.
; The default is 0.
WaveSignalNameWidth = 1

; Specify default options for the restart command. Options can be one
; or more of: -force -nobreakpoint -nolist -nolog -nowave -noassertions
DefaultRestartOptions = -force

; Customize the vsim kernel shutdown behavior at the end of the simulation.
; Some common causes of the end of simulation are $finish (implicit or explicit),
; sc_stop(), tf_dofinish(), and assertion failures.
; This should be set to "ask", "exit", or "stop". The default is "ask".
; "ask"   -- In batch mode, the vsim kernel will abruptly exit.
;            In GUI mode, a dialog box will pop up and ask for user confirmation
;            whether or not to quit the simulation.
; "stop"  -- Cause the simulation to stay loaded in memory. This can make someSummary

I have a 256-bit wide signal bus that does not get included in my toggle coverage report.   I have confirmed in the waveforms that the bits of the bus are toggling. 
Details

By default, Questa/ModelSim limits the width of bus signals it analyzes for toggle coverage to 128 bits. 

There is a modelsim.ini variable called ToggleWidthLimit that can be set to override the default:

The ToggleWidthLimit modelsim.ini variable limits the maximum width of signals that are
automatically added to toggle coverage with the +cover=t argument to vcom or vlog. The
default limit is 128. A value of 0 is taken as "unlimited." This limit is designed to filter out
memories from toggle coverage. The limit applies to Verilog registers and VHDL arrays. If the
register or array is larger than the limit, it is not added to toggle coverage.

Please find this section in your modelsim.ini file and uncomment the line (remove the leading semicolon) for the ToggleWidthLimit variable and set its value as shown here:

; Limit the widths of registers automatically tracked for toggle coverage. Default is 128.
; For unlimited width, set to 0.
ToggleWidthLimit = 256


Optionally, there is a vsim command line option called -togglewidthlimit that could be used to override the default:

      -togglewidthlimit <int>

(optional) Sets the maximum width of signals, <int>, that are automatically added to toggle
coverage with the -cover t argument for vcom or vlog. Overrides the global value set by the
ToggleWidthLimit modelsim.ini variable. If used, it provides default limit values for any
design units not compiled with vlog –togglewidthlimit or vcom –togglewidthlimit.
;            post-simulation tasks easier.
; "exit"  -- The simulation will abruptly exit without asking for any confirmation.
; "final" -- Run SystemVerilog final blocks then behave as "stop".
; Note: This variable can be overridden with the vsim "-onfinish" command line switch.
OnFinish = ask

; Print "simstats" result
; 0 == do not print simstats
; 1 == print at end of simulation
; 2 == print at end of run
; 3 == print at end of run and end of simulation
; default == 0
; PrintSimStats = 1

; Assertion File - alternate file for storing VHDL/PSL/Verilog assertion messages
; AssertFile = assert.log

; Turn on/off collapsing of bus ports in VCD dumpports output
DumpportsCollapse = 1

; Location of Multi-Level Verification Component (MVC) installation.
; The default location is the product installation directory.
MvcHome = $MODEL_TECH/..


[lmc]
; The simulator's interface to Logic Modeling's SmartModel SWIFT software
libsm = $MODEL_TECH/libsm.sl
; The simulator's interface to Logic Modeling's SmartModel SWIFT software (Windows NT)
; libsm = $MODEL_TECH/libsm.dll
;  Logic Modeling's SmartModel SWIFT software (HP 9000 Series 700)
; libswift = $LMC_HOME/lib/hp700.lib/libswift.sl
;  Logic Modeling's SmartModel SWIFT software (IBM RISC System/6000)
; libswift = $LMC_HOME/lib/ibmrs.lib/swift.o
;  Logic Modeling's SmartModel SWIFT software (Sun4 Solaris)
; libswift = $LMC_HOME/lib/sun4Solaris.lib/libswift.so
;  Logic Modeling's SmartModel SWIFT software (Windows NT)
; libswift = $LMC_HOME/lib/pcnt.lib/libswift.dll
;  Logic Modeling's SmartModel SWIFT software (non-Enterprise versions of Linux)
; libswift = $LMC_HOME/lib/x86_linux.lib/libswift.so
;  Logic Modeling's SmartModel SWIFT software (Enterprise versions of Linux)
; libswift = $LMC_HOME/lib/linux.lib/libswift.so

; The simulator's interface to Logic Modeling's hardware modeler SFI software
libhm = $MODEL_TECH/libhm.sl
; The simulator's interface to Logic Modeling's hardware modeler SFI software (Windows NT)
; libhm = $MODEL_TECH/libhm.dll
;  Logic Modeling's hardware modeler SFI software (HP 9000 Series 700)
; libsfi = <sfi_dir>/lib/hp700/libsfi.sl
;  Logic Modeling's hardware modeler SFI software (IBM RISC System/6000)
; libsfi = <sfi_dir>/lib/rs6000/libsfi.a
;  Logic Modeling's hardware modeler SFI software (Sun4 Solaris)
; libsfi = <sfi_dir>/lib/sun4.solaris/libsfi.so
;  Logic Modeling's hardware modeler SFI software (Windows NT)
; libsfi = <sfi_dir>/lib/pcnt/lm_sfi.dll
;  Logic Modeling's hardware modeler SFI software (Linux)
; libsfi = <sfi_dir>/lib/linux/libsfi.so

[msg_system]
; Change a message severity or suppress a message.
; The format is: <msg directive> = <msg number>[,<msg number>...]
; suppress can be used to achieve +nowarn<CODE> functionality
; The format is: suppress = <CODE>,<msg number>,[<CODE>,<msg number>,...]
; Examples:
suppress = 8780
;   note = 3009
;   warning = 3033
;   error = 3010,3016
;   fatal = 3016,3033
;   suppress = 3009,3016,3043
;   suppress = 3009,CNNODP,3043,TFMPC
;   suppress = 8683,8684
; The command verror <msg number> can be used to get the complete
; description of a message.

; Control transcripting of Verilog display system task messages and
; PLI/FLI print function call messages.  The system tasks include
; $display[bho], $strobe[bho], $monitor[bho], and $write[bho].  They
; also include the analogous file I/O tasks that write to STDOUT
; (i.e. $fwrite or $fdisplay).  The PLI/FLI calls include io_printf,
; vpi_printf, mti_PrintMessage, and mti_PrintFormatted.  The default
; is to have messages appear only in the transcript.  The other
; settings are to send messages to the wlf file only (messages that
; are recorded in the wlf file can be viewed in the MsgViewer) or
; to both the transcript and the wlf file.  The valid values are
;    tran  {transcript only (default)}
;    wlf   {wlf file only}
;    both  {transcript and wlf file}
; displaymsgmode = tran

; Control transcripting of elaboration/runtime messages not
; addressed by the displaymsgmode setting.  The default is to
; have messages appear only in the transcript.  The other settings
; are to send messages to the wlf file only (messages that are
; recorded in the wlf file can be viewed in the MsgViewer) or to both
; the transcript and the wlf file. The valid values are
;    tran  {transcript only (default)}
;    wlf   {wlf file only}
;    both  {transcript and wlf file}
; msgmode = tran
