#! /usr/bin/python
import os
import sys
import time
import string
import subprocess

"""
Name:                 Todd Wild
ECN Login:            mg298
PUID:                 00220103461
Email:                twild1990@gmail.com
"""

def genAssertionDict(filename):
	fileRead = open(filename, 'r')
	lineNum = 0
	assertGenDict = {}
	for line in fileRead:
		lineNum += 1
		if ("// **assertgen" in line):
			if ("assert_always" in line):
				matchReturn = (line, assertAlwaysMatch(lineNum, line, fileRead))
				if matchReturn is 0:
					sys.exit()
				assertGenDict[lineNum] = matchReturn
	fileRead.close()
	return assertGenDict

def assertAlwaysMatch(matchNum, match, fileRead):
	inPara = 1
	stateNameArr = []
	dictTuple = (match.split(), stateNameArr)
	line = fileRead.next()
	if ("parameter" not in line):
		print "Error: on line number", matchNum, "there was an assert_always that was not followed by a parameter line,\nPlease see the assertion_update_README for details"
		return 0 # This indicates an Error
	while inPara is 1:
		line = fileRead.next()
		stateNameArr.append(line.split()[0])
		if ";" in line:
			inPara = 0
	return stateNameArr

def createAssertions(assertGenDict):
	assertionList = []
	for key in assertGenDict:
		errStr = "Assert Always Error: invalid state value of (" + assertGenDict[key][0].split()[3] + ")"
		namStr = "invalid_" + assertGenDict[key][0].split()[3]
		exprStr = ""
		for string in assertGenDict[key][1]:
			exprStr = exprStr + "(" + assertGenDict[key][0].split()[3] + " == " + string + ")" + " || "
		exprStr = ' '.join(exprStr.split()[:(len(exprStr.split()) - 1)])
		assertionString = "// 022043adb4e15055615a79bf842c9fd8\n//!!!!! THIS SECTION OF CODE WILL BE REMOVED BY THE ASSERTION GENERATION SCRIPT\n//!!!!! DO NOT EXPECT CHANGES MADE IN THIS SECTION TO REMAIN\n// This assertion was generated from a request that was on line number " + str(key) + " at the time the assertion generation script was run\nassert_always #(\n	`OVL_ERROR       , \n	`OVL_ASSERT      , \n	\"" + errStr + " \", \n	`OVL_COVER_NONE    \n	) " + namStr + " (\n	.clk       (clk),\n	.reset_n   (~rst),\n	.test_expr (" + exprStr + ")\n	);\n//!!!!! END VOLATILE CODE SEGMENT\n// 7ee8edb9e49ef786a2ab83c4032a1eeb\n"
		assertionList.append(assertionString)
	return assertionList

def createNewFile(filename, assertionList):
	fileWrite = open(filename + ".assertions", 'w')
	cmdline_str = ""
	for string in sys.argv:
		cmdline_str = cmdline_str + string
	fileWrite.write("// Autogenerated OVL assertion file generated by " + cmdline_str + "\n")
	fileWrite.write("// Script created by Todd Wild, twild1990@gmail.com\n")
	fileWrite.write("// Usage: `include " + sys.argv[1] + " just before the final endmodule.\n\n")
	for assertion in assertionList:
		fileWrite.write(assertion)
	fileWrite.close()
#	else:
#		fileWrite.write(line)
	

assertGenDict = genAssertionDict(sys.argv[1])
assertionList = createAssertions(assertGenDict)
createNewFile(sys.argv[1], assertionList)
#subprocess.call(["mv", sys.argv[1], sys.argv[1] + ".old"])
#subprocess.call(["mv", sys.argv[1] + ".new", sys.argv[1]])

